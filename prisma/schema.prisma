// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id String @id @default(cuid())
  userId String 
  expiresAt DateTime 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  username  String    @unique
  password   String
  profileImage      String?
  firstName  String
  lastName   String
  healthInfo UserHealthInfo?

  recipe     Recipe[]

  // Relationship fields
  followers  Follows[]  @relation("following") // Tracks users who follow this user
  following  Follows[] @relation("follower") // Tracks users this user follows

  session Session[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Follows {
  id           String   @id @default(cuid())
  
  // The user being followed
  user         User     @relation("following", fields: [userId], references: [id])
  userId       String

  // The user who is following
  follower     User     @relation("follower", fields: [followerId], references: [id])
  followerId   String

  isActive     Boolean  @default(true) // Tracks if the relationship is active
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserHealthInfo {
  id        String   @id @default(cuid())
  weight    Float
  height    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Recipe {
  id        String   @id @default(cuid())
  title     String
  ingredients String 
  procudure String
  image     String[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
